{"version":3,"sources":["components/navbar/style/navbar.module.css","components/navbar/navbar.js","components/card/card.js","App.js","serviceWorker.js","index.js","components/card/style/card.module.css"],"names":["module","exports","Navbar","useState","close","setOpen","className","styles","hamburguer","onClick","href","Card","currencies","setCurrencies","countryID","setCountryID","prices","setPrices","err","setErr","a","Axios","get_currency","data","console","log","id","urlPrices","get","get_Price","selectCountryID","e","target","value","useEffect","getCurrency","getPrice","deleteErr","card","onChange","map","currency","key","name","amount","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f18bd3fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"hamburguer\":\"navbar_hamburguer__D970M\",\"nav--hamburguer-icon\":\"navbar_nav--hamburguer-icon__3nzME\",\"nav-menu\":\"navbar_nav-menu__24K6H\",\"nav-menu-open\":\"navbar_nav-menu-open__BgIwN\"};","import React, {useState} from 'react'\nimport styles from './style/navbar.module.css'\n\nfunction Navbar() {\n\n    const [close, setOpen] = useState('nav-menu')\n\n    function toogleClassOn() {\n        if(close === 'nav-menu'){\n            setOpen('nav-menu-open')\n        }\n        else {\n            setOpen('nav-menu')\n        }\n    }\n\n\n    return (\n        <nav>\n            <div className={styles.hamburguer}\n                 onClick={toogleClassOn}                \n            >\n           <div className={styles['nav--hamburguer-icon']}></div>\n           <div className={styles['nav--hamburguer-icon']}></div>\n           <div className={styles['nav--hamburguer-icon']}></div>\n           </div>\n\n            \n           <div className={styles[close]}>\n                <ul className={styles['nav-list']}>\n                    <li>\n                        <a href=\"#home\">Home</a>\n                    </li>\n                    \n                    <li>\n                        <a href=\"#info\">About</a>\n                    </li>\n                </ul>\n           </div>\n           \n        </nav>\n    )\n}\n\nexport default Navbar\n","import React, { useState, useEffect } from 'react'\nimport Axios from 'axios'\nimport styles from './style/card.module.css'\n\nfunction Card() {\n\n    const [currencies, setCurrencies] = useState(null)\n    const [countryID, setCountryID] = useState(null)\n    const [prices, setPrices] = useState(null)\n    const [err, setErr] = useState(null)\n \n    async function getCurrency() {\n        try {\n            const urlCurrency = \"https://api.coinbase.com/v2/currencies\"\n            const get_currency = await Axios(urlCurrency)\n            await setCurrencies(get_currency.data.data)\n        } catch(error) {\n            console.log(error)\n        }\n    }\n\n    async function getPrice(id) {\n        try {\n            const urlPrices = \"https://api.coinbase.com/v2/prices/spot?currency=\"+id\n            const get_Price = await Axios.get(urlPrices)\n            await setPrices(get_Price.data.data)\n        } \n        catch(error) {\n            console.log(error)\n            await setErr(\"Hubo un error por favor intente de nuevo.\")\n        }\n    }\n\n    let selectCountryID = async (e) => {\n        await setCountryID(e.target.value)\n    }\n\n    async function deleteErr(){\n        await setErr(null)\n    }\n\n    useEffect(() => {\n        getCurrency()\n        if(countryID){\n            getPrice(countryID)\n            deleteErr()\n        }\n    }, [countryID])\n    \n    \n\n    return (\n\n        <div className={styles.card}>\n\n        <select \n        className={styles.currencies}\n        onChange={selectCountryID}\n        >\n\n        <option>Seleccione un pa√≠s</option>\n            {currencies != null ? currencies.map(currency => \n            <option key={currency.id}>{currency.id}</option>) \n            : <option>Loading...</option> } \n        </select>\n\n        <br/>\n        <div className={styles.prices}>\n            \n            {currencies ? currencies.map(currency => countryID === currency.id ? \n            <h2 key={currency.id}>{currency.name}</h2> : null) \n            : <h2>Loading...</h2>}\n            \n        <br/>\n\n            <h2>{ err ? err : prices ? prices.currency + \" \" + prices.amount : null }</h2> \n\n        </div>        \n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react';\nimport './style/main.css'\nimport Navbar from './components/navbar/navbar'\nimport Card from './components/card/card'\n\n\nfunction App() {\n\n  return (\n      \n      <div className=\"App\">\n      <Navbar/>\n        <section className=\"main\" id=\"home\">\n          <article>\n          <h1>\n            Bitcoin\n            <br/>\n            Tracker\n          </h1>\n          </article>\n          <main>\n            <article className=\"main-content\">\n              <Card/>\n            </article>\n          </main>\n          \n          <article className=\"info\" id=\"info\">\n            <h2>About the project</h2>\n            <p>\n              Hello there! <br/>\n              I am Mauricio Borawski a web developer and this is my first \"official\" app in React. <br/>\n              As you can see the app is about to know the price of the Bitcoin in every currency. <br/>\n              I use the API of Coinbase in order to achive this project, <a href=\"https://developers.coinbase.com/api/v2#data-endpoints\" target=\"blank\">here is the link</a> if you want to use it. <br/>\n              The purpose of this app is show to the world a bit of what I can do, a little bit of Front end \n              and a little bit of how I code. <br/>\n              Thanks for reading this and for testing tha app!!  \n              </p>\n          </article>\n        </section>\n      </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__3wMI7\",\"currencies\":\"card_currencies__3lfiw\",\"prices\":\"card_prices__3Ba5V\"};"],"sourceRoot":""}